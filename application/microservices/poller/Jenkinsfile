

node {
    def app
    def commit

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
    }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */

        app = docker.build("${env.poller_dockerhub}")
    }

    stage('get git commit hash') {

        commit = sh(returnStdout: true, script: "git rev-parse HEAD").trim()
    }


    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
            app.push(commit)
        }
    }

    stage('Dangling Volumes') {
          sh 'docker system prune -af --volumes'
    }

    withKubeConfig([credentialsId: "kubenetes-token",serverUrl: "${env.kubernetes_serverUrl}"])  {
        stage('Kubernetes upgrade') {
            // sh "helm upgrade --install  --set name=${NAME} --set image.tag=${VERSION} --set domain=${DOMAIN} ${NAME} ./helm" 
            sh "helm upgrade --install --set dockerhubToken=${env.dockerhubToken} --set env.DBusername=${env.poller_dbusername} --set env.DBhostname=${env.poller_dbUrl} --set env.KAFKAHOST=${env.KAFKAHOST} --set image.repository=${env.poller_dockerhub} --set env.POLL_INTERVAL=${env.POLL_INTERVAL} --set image.tag=${commit} ${env.poller_releaseName} ./helm" 
        }
    }
}