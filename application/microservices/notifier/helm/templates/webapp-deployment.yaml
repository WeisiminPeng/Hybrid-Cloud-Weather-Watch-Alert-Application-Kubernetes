apiVersion: v1
kind: ServiceAccount
metadata:
  name: notifier-sa
  namespace: {{ .Values.namespace }}
  labels:
    app: notifier-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: notifier-role
  labels:
    app: notifier-role
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  - secrets
  verbs:
  - get
  - list
  - watch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: notifier-binding
  namespace: {{ .Values.namespace }}
roleRef:
  kind: Role
  name: notifier-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: notifier-sa
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-notifier-deployment
spec:
  replicas: {{ .Values.replicaCount }}
  progressDeadlineSeconds: {{ .Values.progressDeadlineSeconds }}
  minReadySeconds: {{ .Values.minReadySeconds }}
  strategy:
  {{- if eq .Values.strategyType "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.maxSurge }}
      maxUnavailable: {{ .Values.maxUnavailable }}
  {{- end }}
    # rollingUpdate:
    #   maxSurge: {{ .Values.maxSurge }}
    #   maxUnavailable: {{ .Values.maxUnavailable }}
    type: {{ .Values.strategyType }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-notifier
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-notifier
    spec:
      serviceAccountName: notifier-sa
      containers:
      - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        name: notifier
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
          - containerPort: 8080
            protocol: TCP
        env:
          - name: DBhostname
            value: {{ .Values.env.DBhostname }}
          - name: DBusername
            value: {{ .Values.env.DBusername }}
          - name: DBpassword
            value: {{ .Values.env.DBpassword }}
          - name: DBname
            value: {{ .Values.env.DBname }}
          - name: KAFKAHOST
            value: {{ .Values.env.KAFKAHOST }}
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: {{ .Values.readinessInitialDelay }}
          periodSeconds: {{ .Values.readinessPeriod }}
        livenessProbe:
          httpGet:
            path: /live
            port: 8080
          initialDelaySeconds: {{ .Values.livenessInitialDelay }}
          periodSeconds: {{ .Values.livenessPeriod }}
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
            memory: {{ .Values.resources.limits.memory }}
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
      imagePullSecrets:
          - name: dockerhubtoken-{{ .Release.Name }}

