---
# alternative wat to find instance id
# - name: Get intance id
#   command: aws --region us-east-1  ec2 describe-instances --filter Name=tag:Name,Values=jenkins_ec2 
#                --profile aws
#                --query 'Reservations[0].Instances[0].InstanceId' --output text
#   register: jenkins_instance_id

- name: "Gather EC2 instance facts"
  ec2_instance_info:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    filters:
      "tag:app": "jenkins"
      "instance-state-name": "running"
  register: jenkins_instance_id


- name: grab eip
  ec2_eip_info:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    filters:
      "tag:Name": jenkins_elasticIP
  register: jenkins_eip_ip

- name: disasociate eip
  ec2_eip:
    region: "{{ aws_region }}"
    profile: "{{ aws_profile }}"
    state: absent
    device_id: "{{ jenkins_instance_id.instances[0].instance_id }}"
    ip: "{{ jenkins_eip_ip.addresses[0].public_ip }}"
    # ip: 54.158.251.119
  register: jenkins_eip

- name: Get VPC id
  ec2_vpc_net_facts:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ vpc_name }}"
  register: jenkins_vpc_id

# - name: export aws profile
#   shell: export AWS_PROFILE={{ aws_profile }}

- name: delete vpc
  shell: ./delete_vpc.sh {{ aws_region }} {{ jenkins_vpc_id.vpcs[0].id }}
  environment:
    AWS_PROFILE: "{{ aws_profile }}"







# - debug: var=jenkins_instance_id

# - name: stop instance 
#   ec2:  
#     profile: "{{ aws_profile }}"
#     region: "{{ aws_region }}"
#     instance_ids: "{{ jenkins_instance_id.instances[0].instance_id }}"  
#     state: absent
#     wait: yes
#   when: jenkins_instance_id.instances != []

# - name: delete subnet
#   ec2_vpc_subnet:
#     state: absent
#     profile: "{{ aws_profile }}"
#     region: "{{ aws_region }}"
#     vpc_id: "{{ jenkins_vpc_id.vpcs[0].id }}"
#     cidr: "{{ item.value.cidr }}"
#   with_dict: "{{ vpc_subnets }}"

# - name: delete vpc security groups
#   ec2_group:
#     state: absent
#     profile: "{{ aws_profile}}"
#     region: "{{ aws_region }}"
#     vpc_id: "{{ jenkins_vpc_id.vpcs[0].id }}"

# - name: Grab the route tables
#   ec2_vpc_route_table_facts:
#     profile: "{{ aws_profile }}"
#     region: "{{ aws_region }}"
#     filters:
#       vpc-id: "{{ jenkins_vpc_id.vpcs[0].id }}"
#   register: jenkins_route_table

# - name: delete route table
#   ec2_vpc_route_table:
#     state: absent
#     lookup: id
#     route_table_id: "{{ jenkins_route_table.route_tables[0].id }}"
#     vpc_id: "{{ jenkins_vpc_id.vpcs[0].id }}"
#     profile: "{{ aws_profile }}"
#     region: "{{ aws_region }}"

# - name: detach internet gateway
#   command: aws --region us-east-1 ec2 detach-internet-gateway --profile aws --internet-gateway-id {{ jenkins_route_table.route_tables[0].routes[1].gateway_id }} 
#                 --vpc-id {{ jenkins_vpc_id.vpcs[0].id }}

# - name: delete internet gateway
#   ec2_vpc_igw:
#     state: absent
#     profile: "{{ aws_profile }}"
#     region: "{{ aws_region }}"
#     vpc_id: "{{ jenkins_vpc_id.vpcs[0].id }}"

# - name: delete vpc
#   command: aws --region us-east-1 ec2 delete-vpc --profile aws --all-dependencies --vpc-id {{ jenkins_vpc_id.vpcs[0].id }}


# - name: delete route table
#   ec2_vpc_route_table:
#     state: absent
#     lookup: id
#     route_table_id: "{{ jenkins_route_table.route_tables[0].id }}"
#     vpc_id: "{{ jenkins_vpc_id.vpcs[0].id }}"
#     profile: "{{ aws_profile }}"
#     region: "{{ aws_region }}"




# - name: delete vpc
#   ec2_vpc_net:
#     name: "{{ vpc_name }}"
#     cidr_block: "{{ vpc_cidr }}"
#     region: "{{ aws_region }}"
#     profile: "{{ aws_profile }}"
#     state: absent
#     purge_cidrs: yes 



# - name: Create VPC for Jenkins
#   ec2_vpc_net:
#     state: present
#     region: "{{ aws_region }}"
#     name: "{{ vpc_name }}"
#     cidr_block: "{{ vpc_cidr }}"
#     dns_hostnames: yes
#     dns_support: yes
#     multi_ok: no
#     tenancy: default
#     profile: "{{ aws_profile }}"
#     tags:
#       Name: "jenkins"
#   register: jenkins_vpc

# - name: Create Internet Gateway
#   ec2_vpc_igw:
    # state: present
    # profile: "{{ aws_profile }}"
    # region: "{{ aws_region }}"
    # vpc_id: "{{ jenkins_vpc.vpc.id }}"
#     tags:
#       Name: "jenkins"
#   register: jenkins_igw

# - name: Create subnets
#   ec2_vpc_subnet:
    # state: present
    # profile: "{{ aws_profile }}"
    # region: "{{ aws_region }}"
#     az: "{{ item.value.az }}"
#     vpc_id: "{{ jenkins_vpc.vpc.id }}"
#     cidr: "{{ item.value.cidr }}"
#     tags:
#       Name: "jenkins_{{ item.value.az }}"
#   with_dict: "{{ vpc_subnets }}"
#   register: jenkins_vpc_subnets

# - name: Grab the route tables
#   ec2_vpc_route_table_facts:
#     profile: "{{ aws_profile }}"
#     region: "{{ aws_region }}"
#     filters:
#       vpc-id: "{{ jenkins_vpc.vpc.id }}"
#   register: jenkins_route_table

# - name: Update the route table in the vpc
#   ec2_vpc_route_table:
#     state: present
#     lookup: id
#     route_table_id: "{{ jenkins_route_table.route_tables[0].id }}"
#     vpc_id: "{{ jenkins_vpc.vpc.id}}"
#     profile: "{{ aws_profile }}"
#     region: "{{ aws_region }}"
#     tags:
#       Name: "jenkins_route_table_{{ jenkins_vpc.vpc.id }}"
#     subnets:
#         - "{{ jenkins_vpc_subnets.results[0].subnet.id }}"
#         - "{{ jenkins_vpc_subnets.results[1].subnet.id }}"
#     routes:
#       - dest: 0.0.0.0/0
#         gateway_id: "{{ jenkins_igw.gateway_id }}"
#   register: jenkins_route_table_updated

# - name: Create vpc security groups
#   ec2_group:
#     state: present
#     profile: "{{ aws_profile}}"
#     region: "{{ aws_region }}"
#     vpc_id: "{{ jenkins_vpc.vpc.id }}"
#     name: "jenkins_sg_{{ jenkins_vpc.vpc.id }}"
#     description: "jenkins security group for {{ jenkins_vpc.vpc.id }}"
#     rules:
#       - proto: tcp
#         from_port: 22
#         to_port: 22
#         cidr_ip: 0.0.0.0/0
#       - proto: tcp
#         from_port: 80
#         to_port: 80
#         cidr_ip: 0.0.0.0/0
#       - proto: tcp
#         from_port: 443
#         to_port: 443
#         cidr_ip: 0.0.0.0/0
#       - proto: tcp
#         from_port: 8080
#         to_port: 8080
#         cidr_ip: 0.0.0.0/0
#   register: jenkins_sg

# - name: Create and lanch instance
#   ec2:
#     profile: "{{ aws_profile }}"
#     region: "{{ aws_region }}"
#     key_name: cloud_aws
#     instance_type: t2.micro
#     image: ami-087d55a6d258497f3
#     wait: yes
#     vpc_subnet_id: "{{ jenkins_vpc_subnets.results[0].subnet.id }}"
#     group: "jenkins_sg_{{ jenkins_vpc.vpc.id }}"
#     exact_count: 1
#     count_tag: 
#       Name: jenkins_ec2
#     volumes:
#       - device_name: /dev/sda1
#         volume_type: gp2
#         volume_size: 20
#         delete_on_termination: true
#     instance_tags:  
#           Name: jenkins_ec2
#   register: jenkins_ec2

# - name: associate an existing elastic IP with instance
#   ec2_eip:
#     region: "{{ aws_region }}"
#     profile: "{{ aws_profile }}"
#     state: present
#     device_id: "{{ jenkins_ec2.tagged_instances[0].id }}"
#     ip: "{{ eip_address }}"
#     # ip: 54.158.251.119
#   register: jenkins_eip






# - name: "Gather EC2 instance facts"
#   ec2_instance_facts:
#     profile: "{{ aws_profile }}"
#     region: "{{ aws_region }}"
#     filters:
#       "tag:Type": "jenkins"
#       "instance-state-name": "running"
#   register: jenkins_existing_ec2_instances


